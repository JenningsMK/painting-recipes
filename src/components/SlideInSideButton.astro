---

---
<script>
  /**
   * @summary Functionally for the opening and closing the menu, adding animation to a number of elements.
   * @module side-in-side-button
   */

  /**
   * Enum representing the state of a navigation.
   * @enum {string}
   */
  export enum ButtonState {
    open = 'opened',
    close = 'closed',
  }

  /**
   * Represents CSS classes used in the application.
   * @enum {string}
   */
  export enum Classes {
    noScroll = 'no-scroll',
    toggleOverLay = 'overlay--appear',
    toggleNavigation = 'navigation--open',
    animatedNavButton = 'menu-button--animated',
  }

  /**
   * Once the animation has finished on the button remove the class, so we can add it again if needed
   */
  const animatedButton = function (this: HTMLButtonElement) {
    this.classList.toggle(Classes.animatedNavButton);
  };

  /**
   * Toggle class to open and close the navigation
   */
  const toggleNavigation = () => {
    const menu = document.querySelector('nav');
    menu?.classList.toggle(Classes.toggleNavigation);
    menu?.toggleAttribute('inert');

    if (menu?.hasAttribute('aria-hidden')) {
      menu.removeAttribute('aria-hidden');
    } else {
      menu?.setAttribute('aria-hidden', 'true');
    }
  };

  /**
   * Tag that has been given the class of `overlay`.
   * It's used to add a blur effect to the main content of the page
   * when the titivation is open.
   */
  const overlay = document.querySelector('.overlay');

  /**
   * Toggle class on the overlay for animation
   */
  const animationOverlay = () => {
    overlay?.classList.toggle(Classes.toggleOverLay);

    const mainElement = document.querySelector('main');
    mainElement?.toggleAttribute('inert');
    if (mainElement?.hasAttribute('aria-hidden')) {
      mainElement.removeAttribute('aria-hidden');
    } else {
      mainElement?.setAttribute('aria-hidden', 'true');
    }
  };

  /**
   * Update body by removing or adding the `no-scroll` class
   */
  const toggleBodyClass = () => {
    document.body.classList.toggle(Classes.noScroll);
  };

  /**
   * Change the text of the button to match the state to with the menu will be
   */
  const updateAccessibilityText = function (this: HTMLButtonElement) {
    const span = this.querySelector('span');

    if (span instanceof HTMLSpanElement) {
      const state = this.dataset.state;

      span.textContent = state === ButtonState.open ? 'open menu' : 'close menu';
      this.dataset.state = state === ButtonState.open ? ButtonState.close : ButtonState.open;
    }
  };

  const button = document.querySelector('#menu-button');
  if (button instanceof HTMLButtonElement) {
    button.addEventListener(
      'click',
      () => {
        animatedButton.call(button);
        toggleNavigation();
        animationOverlay();
        toggleBodyClass();
        updateAccessibilityText.call(button);
      },
      {
        capture: true,
        passive: true,
      },
    );

    button.addEventListener('animationend', animatedButton, {
      capture: true,
      passive: true,
    });

    /**
     *
     */
    window.addEventListener('keydown', (event: KeyboardEvent) => {
      if (event.key === 'Escape' && overlay.classList.contains(Classes.toggleOverLay)) {
        const clickEvent = new Event('click');
        button.dispatchEvent(clickEvent);
      }
    });
  }

</script>

<button class="menu-button" id="menu-button" type="button" data-state="closed">
  <span class="sr-only">open menu</span>
</button>

<style>
    @keyframes gradient-grow {
        50% {
            --light-gradient: 100%;
        }
        to {
            --light-gradient: 0;
        }
    }

    .menu-button {
        /*
         * It would be nice to have the svg change colour as the button changes
         * TODO Have a look at changing the svg as the animation is playing,
         * try and make the lines white as the animation is playing.
         */
        background:
                url('../assets/images/hamburger.svg') no-repeat center / auto,
                radial-gradient(circle at center, rgba(96, 28, 128, 1) var(--light-gradient), rgba(255, 255, 255, 1) 0);
        border: none;
        border-radius: 25px;
        box-shadow: var(--dark-100) 1px 1px 10px 1px;
        bottom: 1rem;
        height: 2.1875rem;
        right: 1rem;
        position: fixed;
        cursor: pointer;
        width: 2.1875rem;
    }

    .menu-button:is(:hover, :focus-visible) {
        outline: none;
        transform: scale(1.2);
    }

    @media (prefers-reduced-motion: no-preference) {
        .menu-button {
            transition: transform 0.2s ease-in-out;
        }

        .menu-button--animated {
            animation: 0.75s ease-in-out 1 normal gradient-grow;
        }
    }
</style>
